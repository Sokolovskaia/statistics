
"""     Среднее, медиана, мода:     """
import pandas as pd

# Среднее
mean = df['столбец'].mean()  # на выходе число

# Медиана
median = df['столбец'].median()  # на выходе число

# Мода
mode = df['столбец'].mode()  # на выходе серия Pandas со значениями мод



import numpy as np
from scipy import stats

# Среднее
mean = np.mean(df['столбец'])

# Медиана
median = np.median(df['столбец'])

# Мода
mode = stats.mode(df['столбец'])

# _________________________________________________________

"""     Дисперсия, стандартное отклонение:  """

import pandas as pd

# дисперсия (по умолчанию несмещенная оценка)
var = df['столбец'].var()
# дисперсия (смещенная оценка)
var = df['столбец'].var(ddof=0)


# стандартное отклонение
sd = df['столбец'].std()
# дисперсия (смещенная оценка)
var = df['столбец'].std(ddof=0)



# _________________________________________________________

"""     Ковариация, корреляция:     """
from scipy import stats

# создаем серии данных
A = pd.Series([7.6, 7.9, 8.3, 7.2, 6.9, 7.9, 7.4, 7.8, 5.9, 7.1, 6.8])
B = pd.Series([10, 12, 12, 8, 8, 7.5, 7.5, 7.5, 6.5, 7, 7])

# рассчитываем значение корреляции Пирсона между двумя сериями данных A и B
corr = stats.pearsonr(A,B).statistic



import pandas as pd

df = pd.DataFrame({'столбец_1': [7.6, 7.9, 8.3, 7.2, 6.9, 7.9, 7.4, 7.8, 5.9, 7.1, 6.8],
 'столбец_2': [10, 12, 12, 8, 8, 7.5, 7.5, 7.5, 6.5, 7, 7],
 'столбец_3': [2.5, 1.8, 3.1, 1.9, 2.4, 2.8, 1.0, 3.2, 2.1, 2.2, 0.5]})

# создаем корреляционную матрицу
corr_matrix = df.corr()


# _________________________________________________________
"""     Квантили, квартили, перцентили:     """
# список квартилей, которые хотим рассчитать
Q = [0.25, 0.5, 0.75]

# рассчитываем квантили значений в столбец датафрейма
print(df['столбец'].quantile(Q))


# _________________________________________________________

"""     Box Plot:   """

import matplotlib.pyplot as plt

# строим один Box Plot по столбцу датафрейма
bp = plt.boxplot(df['столбец'],
                     vert=True,  # расположение бокса (True по умолчанию)
                     patch_artist=False,  # наполнение бокса цветом (False по умолчанию)
                     showmeans=True, # показывать среднее (зеленый треугольник) (False по умолчанию)
                     showfliers=True, # показывать выбросы (True по умолчанию)
                     labels=['столбец'])  # надписи
plt.show()

# строим несколько Box Plot по столбцам датафрейма
bp = plt.boxplot([df['столбец_1'],df['столбец_2']])
plt.show()



import pandas as pd

# строим несколько Box Plot по столбцам датафрейма, сгруппированным по другому столбцу
df.boxplot(column=['столбец_1','столбец_2'], by='столбец_3', grid= False , color='black')
plt.show()


# _________________________________________________________

"""     Нормальное распределение:   """
import numpy as np
from scipy import stats

# Создаем нормальное распределение со средним 0 и стандартным отклонением 3
data = stats.norm(0,3)

x = np.linspace(-10, 10, 1000) # Создаем ось Х из 1000 значений в интервале от -10 до 10
# x = np.arange(-10,10,0.02) # Альтернативный способ создания оси Х из 1000 значений в интервале от -10 до 10 с заданием шага(0.02)

CDF = data.cdf(x) # Создаем функкцию CDF от значений в интервале х
plt.plot(x, CDF) # Строим график СDF
plt.show()

PDF = data.pdf(x) # Создаем функкцию PDF от значений в интервале х
plt.plot(x, PDF) # Строим график PDF
plt.show()

SF = data.sf(x) # Создаем функкцию SF от значений в интервале х
plt.plot(x, SF) # Строим график SF
plt.show()

PPF = data.ppf(x) # Создаем функкцию PPF от значений в интервале х
plt.plot(x, PPF) # Строим график PPF
plt.show()

ISF = data.isf(x) # Создаем функкцию ISF от значений в интервале х
plt.plot(x, ISF) # Строим график ISF
plt.show()


# _________________________________________________________

"""     Тест Колмогорова-Смирнова:  """
from numpy.random import seed
from numpy.random import lognormal, randn
from scipy.stats import kstest, ks_2samp

# инициализируем генератор псевдослучайных чисел
seed(0)

# создаем 1000 значений, имеющих логнормальное распределение со средним значением 0 и стандартным отклонением 2
data = lognormal(0, 2, 1000)

# создаем 1000 значений, имеющих стандартное нормальное распределение
standard_normal = randn(1000)

# запускаем одновыборочный тест Колмогорова-Смирнова на соответствие нашего распределения (data) нормальному распределению (norm)
print(kstest(data, 'norm'))

# запускаем двухвыборочный тест Колмогорова-Смирнова
print(ks_2samp(standard_normal, log_normal))

# _________________________________________________________

"""     Тест Колмогорова-Смирнова с поправкой Лиллиефорса:  """
from numpy.random import seed
from numpy.random import lognormal
from statsmodels.stats.diagnostic import lilliefors

# инициализируем генератор псевдослучайных чисел
seed(0)

# создаем 1000 значений, имеющих логнормальное распределение со средним значением 0 и стандартным отклонением 2
data = lognormal(0, 2, 1000)

# запускаем одновыборочный тест Колмогорова-Смирнова c поправкой Лиллиефорса
print(lilliefors(data))

# _________________________________________________________

"""     Тест Шапиро-Уилка:  """
from numpy.random import seed
from numpy.random import poisson
from scipy.stats import shapiro

# инициализируем генератор псевдослучайных чисел
seed(0)

# создаем 100 значений, имеющих распределение Пуассона с лямбдой, равной 5
data = poisson(5, 100)

# запускаем тест Шапиро-Уилка на соответствие нашего распределения (data) нормальному распределению
print(shapiro(data))

# _________________________________________________________

"""     QQ Plot:    """
import statsmodels.api as sm
import matplotlib.pyplot as plt
from numpy.random import lognormal, randn

np.random.seed(0)
# Создаем выборку из 1000 значений, имеющих стандартное нормальное распределение
data = randn(1000)

# Строим QQ plot с reference line в виде прямой линии под 45 градусов
fig = sm.qqplot(data, line='45')
plt.show()

# _________________________________________________________

"""     t-тест:     """
from scipy.stats import ttest_1samp, ttest_ind

#создаем выборки
sample_x = [7, 8, 9, 13, 10, 9, 9, 10, 9, 11, 12, 8, 9, 11, 10, 9, 10]
sample_y = [9, 12, 11, 11, 12, 8, 7, 9, 8, 10, 11, 10, 9, 10, 11, 9, 8]

# проводим одновыборочный t-тест на равенство среднего 9.71
print(ttest_1samp(sample_x, 9.71))

# проводим двухвыборочный t-тест на равенство средних
print(ttest_ind(sample_x, sample_y))

# в случае отсутствия гомогенности дисперсий (тест Уэлча)
print(ttest_ind(sample_x, sample_y, equal_var=False))
